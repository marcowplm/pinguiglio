"""autogenerated by genpy from r2p_msgs/ImuRaw.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import r2p_msgs.msg

class ImuRaw(genpy.Message):
  _md5sum = "038fa76b07790b50cb414643eae47fb9"
  _type = "r2p_msgs/ImuRaw"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """r2p_msgs/Vector3_32 angular_velocity
r2p_msgs/Vector3_32 linear_acceleration
r2p_msgs/Vector3_32 magnetic_field

================================================================================
MSG: r2p_msgs/Vector3_32
# This represents a vector in free space (32 bit variant). 

float32 x
float32 y
float32 z

"""
  __slots__ = ['angular_velocity','linear_acceleration','magnetic_field']
  _slot_types = ['r2p_msgs/Vector3_32','r2p_msgs/Vector3_32','r2p_msgs/Vector3_32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       angular_velocity,linear_acceleration,magnetic_field

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ImuRaw, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.angular_velocity is None:
        self.angular_velocity = r2p_msgs.msg.Vector3_32()
      if self.linear_acceleration is None:
        self.linear_acceleration = r2p_msgs.msg.Vector3_32()
      if self.magnetic_field is None:
        self.magnetic_field = r2p_msgs.msg.Vector3_32()
    else:
      self.angular_velocity = r2p_msgs.msg.Vector3_32()
      self.linear_acceleration = r2p_msgs.msg.Vector3_32()
      self.magnetic_field = r2p_msgs.msg.Vector3_32()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_9f.pack(_x.angular_velocity.x, _x.angular_velocity.y, _x.angular_velocity.z, _x.linear_acceleration.x, _x.linear_acceleration.y, _x.linear_acceleration.z, _x.magnetic_field.x, _x.magnetic_field.y, _x.magnetic_field.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.angular_velocity is None:
        self.angular_velocity = r2p_msgs.msg.Vector3_32()
      if self.linear_acceleration is None:
        self.linear_acceleration = r2p_msgs.msg.Vector3_32()
      if self.magnetic_field is None:
        self.magnetic_field = r2p_msgs.msg.Vector3_32()
      end = 0
      _x = self
      start = end
      end += 36
      (_x.angular_velocity.x, _x.angular_velocity.y, _x.angular_velocity.z, _x.linear_acceleration.x, _x.linear_acceleration.y, _x.linear_acceleration.z, _x.magnetic_field.x, _x.magnetic_field.y, _x.magnetic_field.z,) = _struct_9f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_9f.pack(_x.angular_velocity.x, _x.angular_velocity.y, _x.angular_velocity.z, _x.linear_acceleration.x, _x.linear_acceleration.y, _x.linear_acceleration.z, _x.magnetic_field.x, _x.magnetic_field.y, _x.magnetic_field.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.angular_velocity is None:
        self.angular_velocity = r2p_msgs.msg.Vector3_32()
      if self.linear_acceleration is None:
        self.linear_acceleration = r2p_msgs.msg.Vector3_32()
      if self.magnetic_field is None:
        self.magnetic_field = r2p_msgs.msg.Vector3_32()
      end = 0
      _x = self
      start = end
      end += 36
      (_x.angular_velocity.x, _x.angular_velocity.y, _x.angular_velocity.z, _x.linear_acceleration.x, _x.linear_acceleration.y, _x.linear_acceleration.z, _x.magnetic_field.x, _x.magnetic_field.y, _x.magnetic_field.z,) = _struct_9f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_9f = struct.Struct("<9f")
