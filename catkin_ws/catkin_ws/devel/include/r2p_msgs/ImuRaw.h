// Generated by gencpp from file r2p_msgs/ImuRaw.msg
// DO NOT EDIT!


#ifndef R2P_MSGS_MESSAGE_IMURAW_H
#define R2P_MSGS_MESSAGE_IMURAW_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <r2p_msgs/Vector3_32.h>
#include <r2p_msgs/Vector3_32.h>
#include <r2p_msgs/Vector3_32.h>

namespace r2p_msgs
{
template <class ContainerAllocator>
struct ImuRaw_
{
  typedef ImuRaw_<ContainerAllocator> Type;

  ImuRaw_()
    : angular_velocity()
    , linear_acceleration()
    , magnetic_field()  {
    }
  ImuRaw_(const ContainerAllocator& _alloc)
    : angular_velocity(_alloc)
    , linear_acceleration(_alloc)
    , magnetic_field(_alloc)  {
    }



   typedef  ::r2p_msgs::Vector3_32_<ContainerAllocator>  _angular_velocity_type;
  _angular_velocity_type angular_velocity;

   typedef  ::r2p_msgs::Vector3_32_<ContainerAllocator>  _linear_acceleration_type;
  _linear_acceleration_type linear_acceleration;

   typedef  ::r2p_msgs::Vector3_32_<ContainerAllocator>  _magnetic_field_type;
  _magnetic_field_type magnetic_field;




  typedef boost::shared_ptr< ::r2p_msgs::ImuRaw_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::r2p_msgs::ImuRaw_<ContainerAllocator> const> ConstPtr;

}; // struct ImuRaw_

typedef ::r2p_msgs::ImuRaw_<std::allocator<void> > ImuRaw;

typedef boost::shared_ptr< ::r2p_msgs::ImuRaw > ImuRawPtr;
typedef boost::shared_ptr< ::r2p_msgs::ImuRaw const> ImuRawConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::r2p_msgs::ImuRaw_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::r2p_msgs::ImuRaw_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace r2p_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'r2p_msgs': ['/home/ubuntu/catkin_ws/src/r2p_msgs-master/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::r2p_msgs::ImuRaw_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::r2p_msgs::ImuRaw_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::r2p_msgs::ImuRaw_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::r2p_msgs::ImuRaw_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::r2p_msgs::ImuRaw_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::r2p_msgs::ImuRaw_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::r2p_msgs::ImuRaw_<ContainerAllocator> >
{
  static const char* value()
  {
    return "038fa76b07790b50cb414643eae47fb9";
  }

  static const char* value(const ::r2p_msgs::ImuRaw_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x038fa76b07790b50ULL;
  static const uint64_t static_value2 = 0xcb414643eae47fb9ULL;
};

template<class ContainerAllocator>
struct DataType< ::r2p_msgs::ImuRaw_<ContainerAllocator> >
{
  static const char* value()
  {
    return "r2p_msgs/ImuRaw";
  }

  static const char* value(const ::r2p_msgs::ImuRaw_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::r2p_msgs::ImuRaw_<ContainerAllocator> >
{
  static const char* value()
  {
    return "r2p_msgs/Vector3_32 angular_velocity\n\
r2p_msgs/Vector3_32 linear_acceleration\n\
r2p_msgs/Vector3_32 magnetic_field\n\
\n\
================================================================================\n\
MSG: r2p_msgs/Vector3_32\n\
# This represents a vector in free space (32 bit variant). \n\
\n\
float32 x\n\
float32 y\n\
float32 z\n\
";
  }

  static const char* value(const ::r2p_msgs::ImuRaw_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::r2p_msgs::ImuRaw_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.angular_velocity);
      stream.next(m.linear_acceleration);
      stream.next(m.magnetic_field);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct ImuRaw_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::r2p_msgs::ImuRaw_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::r2p_msgs::ImuRaw_<ContainerAllocator>& v)
  {
    s << indent << "angular_velocity: ";
    s << std::endl;
    Printer< ::r2p_msgs::Vector3_32_<ContainerAllocator> >::stream(s, indent + "  ", v.angular_velocity);
    s << indent << "linear_acceleration: ";
    s << std::endl;
    Printer< ::r2p_msgs::Vector3_32_<ContainerAllocator> >::stream(s, indent + "  ", v.linear_acceleration);
    s << indent << "magnetic_field: ";
    s << std::endl;
    Printer< ::r2p_msgs::Vector3_32_<ContainerAllocator> >::stream(s, indent + "  ", v.magnetic_field);
  }
};

} // namespace message_operations
} // namespace ros

#endif // R2P_MSGS_MESSAGE_IMURAW_H
