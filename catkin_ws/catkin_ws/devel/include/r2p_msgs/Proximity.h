// Generated by gencpp from file r2p_msgs/Proximity.msg
// DO NOT EDIT!


#ifndef R2P_MSGS_MESSAGE_PROXIMITY_H
#define R2P_MSGS_MESSAGE_PROXIMITY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace r2p_msgs
{
template <class ContainerAllocator>
struct Proximity_
{
  typedef Proximity_<ContainerAllocator> Type;

  Proximity_()
    : proximities()  {
      proximities.assign(0.0);
  }
  Proximity_(const ContainerAllocator& _alloc)
    : proximities()  {
      proximities.assign(0.0);
  }



   typedef boost::array<float, 8>  _proximities_type;
  _proximities_type proximities;


    enum { NUM_SENSORS = 8u };
 

  typedef boost::shared_ptr< ::r2p_msgs::Proximity_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::r2p_msgs::Proximity_<ContainerAllocator> const> ConstPtr;

}; // struct Proximity_

typedef ::r2p_msgs::Proximity_<std::allocator<void> > Proximity;

typedef boost::shared_ptr< ::r2p_msgs::Proximity > ProximityPtr;
typedef boost::shared_ptr< ::r2p_msgs::Proximity const> ProximityConstPtr;

// constants requiring out of line definition

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::r2p_msgs::Proximity_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::r2p_msgs::Proximity_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace r2p_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'r2p_msgs': ['/home/ubuntu/catkin_ws/src/r2p_msgs-master/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::r2p_msgs::Proximity_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::r2p_msgs::Proximity_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::r2p_msgs::Proximity_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::r2p_msgs::Proximity_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::r2p_msgs::Proximity_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::r2p_msgs::Proximity_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::r2p_msgs::Proximity_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1c2f713873d56812bdabe757ca4b973f";
  }

  static const char* value(const ::r2p_msgs::Proximity_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1c2f713873d56812ULL;
  static const uint64_t static_value2 = 0xbdabe757ca4b973fULL;
};

template<class ContainerAllocator>
struct DataType< ::r2p_msgs::Proximity_<ContainerAllocator> >
{
  static const char* value()
  {
    return "r2p_msgs/Proximity";
  }

  static const char* value(const ::r2p_msgs::Proximity_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::r2p_msgs::Proximity_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 NUM_SENSORS  = 8     # Number of proximity sensors\n\
\n\
float32[8] proximities      # Proximities [m]\n\
";
  }

  static const char* value(const ::r2p_msgs::Proximity_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::r2p_msgs::Proximity_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.proximities);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct Proximity_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::r2p_msgs::Proximity_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::r2p_msgs::Proximity_<ContainerAllocator>& v)
  {
    s << indent << "proximities[]" << std::endl;
    for (size_t i = 0; i < v.proximities.size(); ++i)
    {
      s << indent << "  proximities[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.proximities[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // R2P_MSGS_MESSAGE_PROXIMITY_H
